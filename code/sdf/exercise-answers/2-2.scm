(load "./sdf/manager/load")
(manage 'new-environment 'combinators)

(define (compose f g)
  (let ((g-arity-min (procedure-arity-min (procedure-arity g)))
        (g-arity-max (procedure-arity-max (procedure-arity g)))
        (f-arity-min (procedure-arity-min (procedure-arity f)))
        (f-arity-max (procedure-arity-max (procedure-arity f))))
    (define (the-composition . args)
      (let ((n (length args)))
        (assert (<= g-arity-min n))
        (assert (or (not g-arity-max)
                    (<= n g-arity-max)))
        (assert (or (not f-arity-max)
                    (>= f-arity-min 1)))
        (f (g args))))
    the-composition))

((compose list
          (lambda (x) (list 'bar x)))
 'z)

;Value: ((bar (z)))

(define (parallel-combine h f g)
  (let ((g-arity-min (procedure-arity-min (procedure-arity g)))
        (g-arity-max (procedure-arity-max (procedure-arity g)))
        (f-arity-min (procedure-arity-min (procedure-arity f)))
        (f-arity-max (procedure-arity-max (procedure-arity f)))
        (h-arity-min (procedure-arity-min (procedure-arity h)))
        (h-arity-max (procedure-arity-max (procedure-arity h))))
    (assert (or (not h-arity-max)
                (>= h-arity-min 2)))
    (define (the-combination . args)
      (let ((n (length args)))
        (assert (>= n g-arity-min))
        (assert (>= n f-arity-min))
        (assert (or (not g-arity-max)
                    (<= n g-arity-max)))
        (assert (or (not f-arity-max)
                    (<= n f-arity-max))))
      (h (apply f args)
         (apply g args)))
    the-combination))

((parallel-combine list list list) 1 2 3 4)
